# plugin folder exists
run_test "[ -d \"$HOME/.obsidian/plugins/obsidian-git\" ]" \
         "obsidian-git plugin directory exists"
         
# ssh-agent running & key loaded
run_test "ssh-add -l | grep -q $KEY_NAME" \
         "ssh-agent running and $KEY_NAME loaded"

# public key is on the server
run_test "ssh -o BatchMode=yes git@$SERVER_IP 'grep -q \"$(cat ~/.ssh/$KEY_NAME.pub)\" ~/.ssh/authorized_keys'" \
         "public key present in server’s authorized_keys"
         
# origin exists and matches
run_test "cd \"$VAULT\" && git remote get-url origin | grep -q \"$SERVER_IP:/home/git/vaults/$(basename $VAULT).git\"" \
         "git remote 'origin' correctly set"

# dry‑run fetch (no prompt)
run_test "cd \"$VAULT\" && GIT_SSH_COMMAND='ssh -o BatchMode=yes' git fetch --dry-run origin" \
         "git fetch succeeds without password"

# dry‑run push (no prompt)
run_test "cd \"$VAULT\" && GIT_SSH_COMMAND='ssh -o BatchMode=yes' git push --dry-run origin HEAD:HEAD" \
         "git push succeeds without password"
         
# server IP is in known_hosts
run_test "grep -q \"$SERVER_IP\" ~/.ssh/known_hosts" \
         "known_hosts contains $SERVER_IP"

# no stale entries: after removing, manual ssh adds it back
run_test "ssh-keygen -f ~/.ssh/known_hosts -R $SERVER_IP >/dev/null 2>&1 && ssh -o StrictHostKeyChecking=no git@$SERVER_IP exit" \
         "known_hosts entry can be regenerated automatically"
         


# 3) SSH key files + agent
run_test "[ -f ${OBS_HOME}/.ssh/id_ed25519 ]" \
         "private key exists at ~/.ssh/id_ed25519"

run_test \
  "[ \"\$(stat -c '%a' ${OBS_HOME}/.ssh/id_ed25519)\" = \"600\" ]" \
  "private key perms are 600"

run_test "[ -f ${OBS_HOME}/.ssh/id_ed25519.pub ]" \
         "public key exists at ~/.ssh/id_ed25519.pub"

run_test \
  "[ \"\$(stat -c '%a' ${OBS_HOME}/.ssh/id_ed25519.pub)\" = \"644\" ]" \
  "public key perms are 644"

run_test "ssh-add -l | grep -q id_ed25519" \
         "SSH agent is running and id_ed25519 is loaded"
         

