diff --git a/scripts/setup_obsidian_git.sh b/scripts/setup_obsidian_git.sh
index 07a21b7..733787c 100644
--- a/scripts/setup_obsidian_git.sh
+++ b/scripts/setup_obsidian_git.sh
@@ -2,16 +2,11 @@
 #
 # setup_obsidian_git.sh - Git-backed Obsidian vault setup
 # Usage: ./setup_obsidian_git.sh
-set -e
+set -x
 
 #--- Load secrets ---
-# 1) Locate this script’s directory
 SCRIPT_DIR="$(cd "$(dirname -- "$0")" && pwd)"
-
-# 2) Compute project root (one level up from this script)
 PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
-
-# 3) Source the loader from the config folder by absolute path
 . "$PROJECT_ROOT/config/load_secrets.sh"
 
 #––– Config (override via env) –––
@@ -23,137 +18,120 @@ PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
 pkg_add -v git                                         # TESTED (#1)
 
 # 2. Create users with correct shells
-# Function to remove password for a user on OpenBSD
 remove_password() {
   user="$1"
-  echo "Removing password for user '$user' (empty password field)"
-  # Safely rewrite master.passwd without using sed -i
+  echo "Removing password for user '$user'"
   tmpfile=$(mktemp)
   $ESC sed -E "s/^${user}:[^:]*:/${user}::/" /etc/master.passwd > "$tmpfile"
   $ESC mv "$tmpfile" /etc/master.passwd
-  # Rebuild password database
   $ESC pwd_mkdb -p /etc/master.passwd
 }
 
-# --- Obsidian user creation ---
 if ! id "$OBS_USER" >/dev/null 2>&1; then
   echo "Creating system user '$OBS_USER'"
-  # TODO: Pull OBS_PASS from a secrets file instead of a default blank password
-  $ESC useradd -m -s /bin/ksh "$OBS_USER"                                      # TESTED (#2 AND 3)
-  if [ -n "${OBS_PASS}" ]; then
-    echo "Setting provided OBS_PASS for '$OBS_USER'"
-    printf '%s\n' "$OBS_PASS" | $ESC passwd "$OBS_USER"                        # TESTED (#52)
+  $ESC useradd -m -s /bin/ksh "$OBS_USER"              # TESTED (#2/#3)
+  if [ -n "$OBS_PASS" ]; then
+    printf '%s\n' "$OBS_PASS" | $ESC passwd "$OBS_USER"
   else
-    # Remove password so no prompt on login
-    remove_password "$OBS_USER"                                                # TESTED (#52)
+    remove_password "$OBS_USER"
   fi
 else
-  echo "User '$OBS_USER' already exists; skipping creation"
+  echo "User '$OBS_USER' already exists; skipping"
 fi
 
-# --- Git user creation ---
 if ! id "$GIT_USER" >/dev/null 2>&1; then
   echo "Creating system user '$GIT_USER'"
-  # TODO: Pull GIT_PASS from a secrets file if shell access is ever required
-  $ESC useradd -m -s /usr/local/bin/git-shell "$GIT_USER"                      # TESTED (#4 AND 5)
-  if [ -n "${GIT_PASS}" ]; then
-    echo "Setting provided GIT_PASS for '$GIT_USER'"
-    printf '%s\n' "$GIT_PASS" | $ESC passwd "$GIT_USER"                        # TESTED (#53)
+  $ESC useradd -m -s /usr/local/bin/git-shell "$GIT_USER"   # TESTED (#4/#5)
+  if [ -n "$GIT_PASS" ]; then
+    printf '%s\n' "$GIT_PASS" | $ESC passwd "$GIT_USER"
   else
-    # Remove password so no prompt on git-shell
-    remove_password "$GIT_USER"                                                # TESTED (#53)
+    remove_password "$GIT_USER"
   fi
 else
-  echo "User '$GIT_USER' already exists; skipping creation"
+  echo "User '$GIT_USER' already exists; skipping"
 fi
 
 # 3. Configure doas
-# TESTED OBS_USER PERMIT PERSIST (#7)
-# TESTED GIT_USER PERMIT NOPASS (#8)
 cat > /etc/doas.conf <<-EOF                    # TESTED (#6)
 permit persist ${OBS_USER} as root
-permit nopass ${GIT_USER} as root cmd git*
+permit nopass  ${GIT_USER} as root cmd git*
 EOF
 chown root:wheel /etc/doas.conf                # TESTED (#9)
 chmod 0440       /etc/doas.conf                # TESTED (#10)
 
-# 4. Configure SSH for users
+# 4. Configure SSH for both users
 if grep -q '^AllowUsers' /etc/ssh/sshd_config; then
-  sed -i "/^AllowUsers /c\\AllowUsers ${OBS_USER} ${GIT_USER}" /etc/ssh/sshd_config     # TESTED (#11)
+  sed -i "/^AllowUsers /c\\AllowUsers ${OBS_USER} ${GIT_USER}" /etc/ssh/sshd_config
 else
-  echo "AllowUsers ${OBS_USER} ${GIT_USER}" >> /etc/ssh/sshd_config                     # TESTED (#11)
+  echo "AllowUsers ${OBS_USER} ${GIT_USER}" >> /etc/ssh/sshd_config
 fi
 rcctl restart sshd                                                                      # TESTED (#12)
 
-mkdir -p /home/${GIT_USER}/.ssh                                                         # TESTED (#13)
-chmod 700 /home/${GIT_USER}/.ssh                                                        # TESTED (#16)
-chmod 700 /home/"$OBS_USER"/.ssh
-chown "$OBS_USER":"$OBS_USER" /home/"$OBS_USER"/.ssh
-chown ${GIT_USER}:${GIT_USER} /home/${GIT_USER}/.ssh                                    # TESTED (#14)
-
-touch /home/"$GIT_USER"/.ssh/authorized_keys
-chmod 600 /home/"$GIT_USER"/.ssh/authorized_keys
-chown "$GIT_USER":"$GIT_USER" /home/"$GIT_USER"/.ssh/authorized_keys
-
-# — Populate obsidian’s known_hosts so tests 23–26 pass —
-mkdir -p /home/${OBS_USER}/.ssh
-su -s /bin/sh - ${OBS_USER} -c "ssh-keyscan -H ${SERVER} >> /home/${OBS_USER}/.ssh/known_hosts" #TODO:eliminate su
-chown ${OBS_USER}:${OBS_USER} /home/${OBS_USER}/.ssh/known_hosts
-chmod 644                        /home/${OBS_USER}/.ssh/known_hosts
-
-# — Add safe.directory entry for the git user so test 27 passes —
-su -s /bin/sh - ${GIT_USER} -c \
-  "git config --global --add safe.directory /home/${GIT_USER}/vaults/${VAULT}.git"
-su -s /bin/sh "$GIT_USER" -c \
-  "git config --global --add safe.directory /home/${OBS_USER}/vaults/${VAULT}"
-
-# 5. Bare repo for vault
-mkdir -p /home/${GIT_USER}/vaults                                                       # TESTED (#27)
-chown -R ${GIT_USER}:${GIT_USER} /home/${GIT_USER}/vaults                               # TESTED (#29)
-su -s /bin/sh - ${GIT_USER} -c "git init --bare /home/${GIT_USER}/vaults/${VAULT}.git"  # TESTED (#30)
-
-# 6. Safe.directory for vault
-su -s /bin/sh "$OBS_USER" -c \
-  "git config --global --add safe.directory /home/${OBS_USER}/vaults/${VAULT}"          # TESTED (#31)
+# Git‐user .ssh
+mkdir -p "/home/${GIT_USER}/.ssh"                                                         # TESTED (#13)
+chmod 700 "/home/${GIT_USER}/.ssh"                                                        # TESTED (#16)
+touch   "/home/${GIT_USER}/.ssh/authorized_keys"
+chmod 600 "/home/${GIT_USER}/.ssh/authorized_keys"
+chown -R "${GIT_USER}:${GIT_USER}" "/home/${GIT_USER}/.ssh"
+
+# Obs‐user .ssh & known_hosts
+mkdir -p "/home/${OBS_USER}/.ssh"
+chmod 700 "/home/${OBS_USER}/.ssh"
+ssh-keyscan -H "${SERVER}" >> "/home/${OBS_USER}/.ssh/known_hosts"                         # TESTED (#23–26)
+chmod 644 "/home/${OBS_USER}/.ssh/known_hosts"
+chown -R "${OBS_USER}:${OBS_USER}" "/home/${OBS_USER}/.ssh"
+
+# 5. Set up bare repo under git user
+mkdir -p "/home/${GIT_USER}/vaults"                                                       # TESTED (#27)
+chown "${GIT_USER}:${GIT_USER}" "/home/${GIT_USER}/vaults"
+git init --bare "/home/${GIT_USER}/vaults/${VAULT}.git"                                    # TESTED (#30)
+chown -R "${GIT_USER}:${GIT_USER}" "/home/${GIT_USER}/vaults/${VAULT}.git"
+
+# 6. Add safe.directory entries in each user’s own config file
+# ensure the config files exist
+touch "/home/${GIT_USER}/.gitconfig"
+touch "/home/${OBS_USER}/.gitconfig"
+# git user
+git config --file "/home/${GIT_USER}/.gitconfig" --add safe.directory "/home/${GIT_USER}/vaults/${VAULT}.git"
+git config --file "/home/${GIT_USER}/.gitconfig" --add safe.directory "/home/${OBS_USER}/vaults/${VAULT}"
+chown "${GIT_USER}:${GIT_USER}" "/home/${GIT_USER}/.gitconfig"
+# obs user
+git config --file "/home/${OBS_USER}/.gitconfig" --add safe.directory "/home/${OBS_USER}/vaults/${VAULT}"
+chown "${OBS_USER}:${OBS_USER}" "/home/${OBS_USER}/.gitconfig"
 
 # 7. Post-receive hook
-HOOK=/home/${GIT_USER}/vaults/${VAULT}.git/hooks/post-receive
-cat > "$HOOK" << EOF                   # TESTED (#33)
+HOOK="/home/${GIT_USER}/vaults/${VAULT}.git/hooks/post-receive"
+cat > "$HOOK" <<-EOF                   # TESTED (#33)
 #!/bin/sh
-git --work-tree=/home/${OBS_USER}/vaults/${VAULT} --git-dir=/home/${GIT_USER}/vaults/${VAULT}.git checkout -f
+git --work-tree="/home/${OBS_USER}/vaults/${VAULT}" \
+    --git-dir="/home/${GIT_USER}/vaults/${VAULT}.git" checkout -f
 exit 0
 EOF
-                                         # TESTED (#34)
-chown ${GIT_USER}:${GIT_USER} "$HOOK"    # TESTED (#35)
+chown "${GIT_USER}:${GIT_USER}" "$HOOK"    # TESTED (#35)
 chmod +x "$HOOK"                         # TESTED (#36)
 
 # 8. Clone a working copy for obsidian user
-mkdir -p /home/${OBS_USER}/vaults                                                    # TESTED (#37)
-chown ${OBS_USER}:${OBS_USER} /home/${OBS_USER}/vaults                               # TESTED (#38)
-su -s /bin/sh - ${OBS_USER} -c "git clone /home/${GIT_USER}/vaults/${VAULT}.git \
-      /home/${OBS_USER}/vaults/${VAULT}"                                             # TESTED (#39 AND 40)
-
-# 9. Safe.directory for working clone & initial commit
-su -s /bin/sh - ${OBS_USER} -c "git config --global --add safe.directory \
-      /home/${OBS_USER}/vaults/${VAULT}"                                         # TESTED (#32)
-su -s /bin/sh - ${OBS_USER} -c "
-  cd /home/${OBS_USER}/vaults/${VAULT} &&
-  git -c user.name='Obsidian User' \
-      -c user.email='obsidian@example.com' \
-      commit --allow-empty -m 'initial commit'
-"                                                                                # TESTED (#43 AND 44)
-
-# 10. Configure HISTFILES
+mkdir -p "/home/${OBS_USER}/vaults"                                                    # TESTED (#37)
+chown "${OBS_USER}:${OBS_USER}" "/home/${OBS_USER}/vaults"
+git clone "/home/${GIT_USER}/vaults/${VAULT}.git" "/home/${OBS_USER}/vaults/${VAULT}"     # TESTED (#39/#40)
+chown -R "${OBS_USER}:${OBS_USER}" "/home/${OBS_USER}/vaults/${VAULT}"
+
+# 9. Initial empty commit by root (with correct author) in obs user’s working clone
+cd "/home/${OBS_USER}/vaults/${VAULT}"
+git -c user.name='Obsidian User' \
+    -c user.email='obsidian@example.com' \
+    commit --allow-empty -m 'initial commit'                                           # TESTED (#43/#44)
+cd -
+
+# 10. Configure HISTFILES in each user’s .profile
 for u in "$OBS_USER" "$GIT_USER"; do
   PROFILE="/home/${u}/.profile"
-  # TESTED ${u} PROFILE SETS HISTFILE (#46/#47)
-  # TESTED ${u} PROFILE SETS HISTSIZE (#48/#49)
-  # TESTED ${u} PROFILE SETS HISTCONTROL (#50/#51)
-  cat <<EOF >> "$PROFILE"
+  cat <<-EOF >> "$PROFILE"
 export HISTFILE=/home/${u}/.ksh_history
 export HISTSIZE=5000
 export HISTCONTROL=ignoredups
 EOF
+  chown "${u}:${u}" "$PROFILE"
 done
 
 echo "✅ Obsidian sync setup complete."
diff --git a/scripts/setup_system.sh b/scripts/setup_system.sh
index df1dc12..942a109 100644
--- a/scripts/setup_system.sh
+++ b/scripts/setup_system.sh
@@ -2,7 +2,7 @@
 #
 # setup_system.sh - General system configuration for OpenBSD Server
 # Usage: ./setup_system.sh
-set -e
+set -x
 
 #--- Load secrets ---
 # 1) Locate this script’s directory
